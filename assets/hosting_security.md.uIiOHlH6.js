import{_ as t,c as a,o as i,ag as o}from"./chunks/framework.Bw-5EFTY.js";const h=JSON.parse('{"title":"🛡️ Security in Notivae","description":"","frontmatter":{},"headers":[],"relativePath":"hosting/security.md","filePath":"en/hosting/security.md","lastUpdated":1754857830000}'),r={name:"hosting/security.md"};function s(n,e,c,l,d,u){return i(),a("div",null,e[0]||(e[0]=[o('<h1 id="🛡️-security-in-notivae" tabindex="-1">🛡️ Security in Notivae <a class="header-anchor" href="#🛡️-security-in-notivae" aria-label="Permalink to &quot;🛡️ Security in Notivae&quot;">​</a></h1><p>This section documents backend-level features and mechanisms designed to protect your Notivae instance from abuse, resource exhaustion, and unauthorized access. These measures apply to self-hosted deployments and may need adjustment depending on your environment.</p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>These security features are built-in and require no external services. They apply automatically when Notivae is deployed.</p></div><h2 id="🔐-two-factor-authentication-planned" tabindex="-1">🔐 Two-Factor Authentication (Planned) <a class="header-anchor" href="#🔐-two-factor-authentication-planned" aria-label="Permalink to &quot;🔐 Two-Factor Authentication (Planned)&quot;">​</a></h2><p>Two-Factor Authentication (2FA) support is planned for future versions of Notivae. Once available, it will provide an additional layer of account security by requiring users to enter a time-based or device-generated code when logging in — especially useful for admin-level accounts or shared instances.</p><h2 id="🔒-https-reverse-proxy-configuration" tabindex="-1">🔒 HTTPS &amp; Reverse Proxy Configuration <a class="header-anchor" href="#🔒-https-reverse-proxy-configuration" aria-label="Permalink to &quot;🔒 HTTPS &amp; Reverse Proxy Configuration&quot;">​</a></h2><p>Notivae is designed to run behind a reverse proxy like Nginx or Caddy, which should be configured to handle HTTPS and SSL termination.</p><p>Using HTTPS is essential to protect session tokens and sensitive data from being intercepted during transmission — especially important since authentication relies on httponly cookies.</p><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>For guidance on setting up a secure reverse proxy, see the <a href="./../start/installation/reverse-proxy">Reverse Proxy Setup Guide</a>.</p></div><h2 id="🔃-rate-limiting" tabindex="-1">🔃 Rate Limiting <a class="header-anchor" href="#🔃-rate-limiting" aria-label="Permalink to &quot;🔃 Rate Limiting&quot;">​</a></h2><p>To protect the server from misuse and ensure a stable experience for all users, Notivae applies automatic rate limits to certain API endpoints.</p><p>This means that if too many requests are made in a short time — whether by a user, a bot, or a misconfigured client — the server may temporarily reject further requests. In these cases, the response will clearly indicate that the limit was reached and suggest how long to wait before trying again.</p><p>Rate limits apply more strictly to unauthenticated users, while authenticated sessions are granted more flexibility.</p><h2 id="🚫-temporary-bans" tabindex="-1">🚫 Temporary Bans <a class="header-anchor" href="#🚫-temporary-bans" aria-label="Permalink to &quot;🚫 Temporary Bans&quot;">​</a></h2><p>If a client repeatedly hits the rate limit in a short time, Notivae may temporarily block further access from that user or IP address. This helps prevent abuse and reduces server load from bad actors or faulty automation.</p><p>Temporary bans are applied automatically and expire after a short period (e.g. one hour). Most users will never encounter this unless they are spamming requests or using unsupported tools.</p><h2 id="🛡️-csrf-protection" tabindex="-1">🛡️ CSRF Protection <a class="header-anchor" href="#🛡️-csrf-protection" aria-label="Permalink to &quot;🛡️ CSRF Protection&quot;">​</a></h2><p>Notivae’s session authentication uses a <code>session_token</code> cookie with the following security flags:</p><ul><li><code>HttpOnly</code>: Prevents JavaScript access</li><li><code>Secure</code>: Only sent over HTTPS</li><li><code>SameSite=Lax</code>: Allows form submissions but blocks most third-party cross-site requests</li></ul><p>This setup provides basic protection against Cross-Site Request Forgery (CSRF) in most scenarios. While it&#39;s not a full CSRF defense mechanism, it&#39;s considered safe for APIs that do not accept cookie-authenticated cross-origin POSTs from third-party sites.</p><p>In future versions, Notivae may add stricter CSRF validation for endpoints that modify server-side state.</p>',21)]))}const m=t(r,[["render",s]]);export{h as __pageData,m as default};
